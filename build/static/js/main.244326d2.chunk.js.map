{"version":3,"sources":["Today/Today.js","History/History.js","App.js","serviceWorker.js","index.js"],"names":["Today","state","btcprice","ltcprice","ethprice","saveStateToLocalStorage","localStorage","setItem","JSON","stringify","_this","restoreStateFromLocalStorage","parse","getItem","setState","data","axios","post","prices","then","response","console","log","catch","error","_this2","this","navigator","onLine","pusher","Pusher","cluster","encrypted","subscribe","get","_ref","_ref$data","BTC","ETH","LTC","USD","cryptoSubscription","setInterval","_ref2","sendPricePusher","bind","_ref3","_ref3$prices","clearInterval","react_default","a","createElement","className","Component","History","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","todayprice","yesterdayprice","twodaysprice","threedaysprice","fourdaysprice","getBTCPrices","assertThisInitialized","getETHPrices","getLTCPrices","date","t","moment","unix","all","spread","eth","btc","ltc","f","format","_this3","subtract","_this4","_this5","_this6","getTodayPrice","getYesterdayPrice","getTwoDaysPrice","getThreeDaysPrice","getFourDaysPrice","App","href","target","rel","src_Today_Today","src_History_History","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.244326d2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Today.css\";\nimport axios from \"axios\";\nimport Pusher from \"pusher-js\";\n\nclass Today extends Component {\n  state = {\n    btcprice: 0,\n    ltcprice: 0,\n    ethprice: 0\n  };\n\n  //let’s create a simple function that takes in an argument and sends it to the backend server API.\n  sendPricePusher(data) {\n    axios\n      .post(\"/prices/new\", {\n        prices: data\n      })\n      .then(response => {\n        console.log(response);\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }\n\n  saveStateToLocalStorage = () => {\n    localStorage.setItem(\"today-state\", JSON.stringify(this.state));\n  };\n\n  restoreStateFromLocalStorage = () => {\n    const state = JSON.parse(localStorage.getItem(\"today-state\"));\n    this.setState(state);\n  };\n\n  // This is called when an instance of a component is being created and inserted into the DOM.\n  componentDidMount() {\n    if (!navigator.onLine) {\n      return this.saveStateToLocalStorage();\n    }\n\n    // establish a connection to Pusher\n    this.pusher = new Pusher(\"APP_KEY\", {\n      cluster: \"eu\",\n      encrypted: true\n    });\n    // Subscribe to the 'coin-prices' channel\n    this.prices = this.pusher.subscribe(\"coin-prices\");\n\n    axios\n      .get(\n        \"https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC&tsyms=USD\"\n      )\n      .then(({ data: { BTC, ETH, LTC } }) => {\n        // Since we're never using responseh or data directly might aswell deconstruct it here\n\n        this.setState(\n          {\n            btcprice: BTC.USD,\n            ethprice: ETH.USD,\n            ltcprice: LTC.USD\n          },\n          this.saveStateToLocalStorage\n        ); // You can pass a callback function to setState\n      })\n      .catch(console.error);\n\n    // Let's store this interval in our class so that we can remove it in componentWillUnmount\n    this.cryptoSubscription = setInterval(() => {\n      axios\n        .get(\n          \"https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC&tsyms=USD\"\n        )\n        .then(({ data }) => {\n          // This is a style question, I prefed doing it this way, to each its own\n          this.sendPricePusher(data);\n          console.log(data);\n          this.setState({\n            btcprice: data.BTC.USD,\n            ethprice: data.ETH.USD,\n            ltcprice: data.LTC.USD\n          });\n        })\n        .catch(console.error);\n    }, 10000);\n    console.log(\"111\");\n\n    // We bind to the 'prices' event and use the data in it (price information) to update the state values, thus, realtime changes\n    this.prices.bind(\n      \"prices\",\n      ({ prices: { BTC, ETH, LTC } }) => {\n        console.log(\"bind lai data\");\n\n        this.setState(\n          {\n            btcprice: BTC.USD,\n            ethprice: ETH.USD,\n            ltcprice: LTC.USD\n          },\n          this.saveStateToLocalStorage\n        );\n      },\n      this\n    );\n  }\n  componentWillUnmount() {\n    clearInterval(this.cryptoSubscription);\n  }\n  // The render method contains the JSX code which will be compiled to HTML.\n  render() {\n    return (\n      <div className=\"today--section container\">\n        <h2>Current Price</h2>\n        <div className=\"columns today--section__box\">\n          <div className=\"column btc--section\">\n            <h5>${this.state.btcprice}</h5>\n            <p>1 BTC</p>\n          </div>\n          <div className=\"column eth--section\">\n            <h5>${this.state.ethprice}</h5>\n            <p>1 ETH</p>\n          </div>\n          <div className=\"column ltc--section\">\n            <h5>${this.state.ltcprice}</h5>\n            <p>1 LTC</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Today;\n","import React, { Component } from \"react\";\nimport \"./History.css\";\nimport axios from \"axios\";\nimport moment from \"moment\";\n\nclass History extends Component {\n  constructor() {\n    super();\n    this.state = {\n      todayprice: {},\n      yesterdayprice: {},\n      twodaysprice: {},\n      threedaysprice: {},\n      fourdaysprice: {}\n    };\n    this.getBTCPrices = this.getBTCPrices.bind(this);\n    this.getETHPrices = this.getETHPrices.bind(this);\n    this.getLTCPrices = this.getLTCPrices.bind(this);\n  }\n  // This function gets the ETH price for a specific timestamp/date. The date is passed in as an argument\n  getETHPrices(date) {\n    return axios.get(\n      \"https://min-api.cryptocompare.com/data/pricehistorical?fsym=ETH&tsyms=USD&ts=\" +\n        date\n    );\n  }\n  // This function gets the BTC price for a specific timestamp/date. The date is passed in as an argument\n  getBTCPrices(date) {\n    return axios.get(\n      \"https://min-api.cryptocompare.com/data/pricehistorical?fsym=BTC&tsyms=USD&ts=\" +\n        date\n    );\n  }\n  // This function gets the LTC price for a specific timestamp/date. The date is passed in as an argument\n  getLTCPrices(date) {\n    return axios.get(\n      \"https://min-api.cryptocompare.com/data/pricehistorical?fsym=LTC&tsyms=USD&ts=\" +\n        date\n    );\n  }\n\n  // This function gets the prices for the current date.\n  getTodayPrice() {\n    // Get today's date in timestamp\n    let t = moment().unix();\n    // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\n    axios\n      .all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\n      .then(\n        axios.spread((eth, btc, ltc) => {\n          let f = {\n            date: moment.unix(t).format(\"MMMM Do YYYY\"),\n            eth: eth.data.ETH.USD,\n            btc: btc.data.BTC.USD,\n            ltc: ltc.data.LTC.USD\n          };\n          // Set the state of todayprice to the content of the object f\n          localStorage.setItem(\"todayprice\", JSON.stringify(f));\n          this.setState({ todayprice: f });\n        })\n      );\n  }\n  // This function gets the prices for the yesterday.\n  getYesterdayPrice() {\n    // Get yesterday's date in timestamp\n    let t = moment()\n      .subtract(1, \"days\")\n      .unix();\n    // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\n    axios\n      .all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\n      .then(\n        axios.spread((eth, btc, ltc) => {\n          let f = {\n            date: moment.unix(t).format(\"MMMM Do YYYY\"),\n            eth: eth.data.ETH.USD,\n            btc: btc.data.BTC.USD,\n            ltc: ltc.data.LTC.USD\n          };\n          // Set the state of yesterdayprice to the content of the object f\n          localStorage.setItem(\"yesterdayprice\", JSON.stringify(f));\n\n          this.setState({ yesterdayprice: f });\n        })\n      );\n  }\n  // This function gets the prices for the two days ago.\n  getTwoDaysPrice() {\n    // Get the date for two days ago in timestamp\n    let t = moment()\n      .subtract(2, \"days\")\n      .unix();\n    // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\n    axios\n      .all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\n      .then(\n        axios.spread((eth, btc, ltc) => {\n          let f = {\n            date: moment.unix(t).format(\"MMMM Do YYYY\"),\n            eth: eth.data.ETH.USD,\n            btc: btc.data.BTC.USD,\n            ltc: ltc.data.LTC.USD\n          };\n          // Set the state of twodaysprice to the content of the object f\n          localStorage.setItem(\"twodaysprice\", JSON.stringify(f));\n\n          this.setState({ twodaysprice: f });\n        })\n      );\n  }\n  // This function gets the prices for the three days ago.\n  getThreeDaysPrice() {\n    // Get the date for three days ago in timestamp\n    let t = moment()\n      .subtract(3, \"days\")\n      .unix();\n    // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\n    axios\n      .all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\n      .then(\n        axios.spread((eth, btc, ltc) => {\n          let f = {\n            date: moment.unix(t).format(\"MMMM Do YYYY\"),\n            eth: eth.data.ETH.USD,\n            btc: btc.data.BTC.USD,\n            ltc: ltc.data.LTC.USD\n          };\n          // Set the state of threedaysprice to the content of the object f\n          localStorage.setItem(\"threedaysprice\", JSON.stringify(f));\n\n          this.setState({ threedaysprice: f });\n        })\n      );\n  }\n  // This function gets the prices for the four days ago.\n  getFourDaysPrice() {\n    // Get the date for four days ago in timestamp\n    let t = moment()\n      .subtract(4, \"days\")\n      .unix();\n    // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\n    axios\n      .all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\n      .then(\n        axios.spread((eth, btc, ltc) => {\n          let f = {\n            date: moment.unix(t).format(\"MMMM Do YYYY\"),\n            eth: eth.data.ETH.USD,\n            btc: btc.data.BTC.USD,\n            ltc: ltc.data.LTC.USD\n          };\n          // Set the state of fourdaysprice to the content of the object f\n          localStorage.setItem(\"fourdaysprice\", JSON.stringify(f));\n\n          this.setState({ fourdaysprice: f });\n        })\n      );\n  }\n  // This is called when an instance of a component is being created and inserted into the DOM.\n  componentWillMount() {\n    this.getTodayPrice();\n    this.getYesterdayPrice();\n    this.getTwoDaysPrice();\n    this.getThreeDaysPrice();\n    this.getFourDaysPrice();\n  }\n  componentDidMount() {\n    if (!navigator.onLine) {\n      this.setState({\n        todayprice: JSON.parse(localStorage.getItem(\"todayprice\"))\n      });\n      this.setState({\n        yesterdayprice: JSON.parse(localStorage.getItem(\"yesterdayprice\"))\n      });\n      this.setState({\n        twodaysprice: JSON.parse(localStorage.getItem(\"twodaysprice\"))\n      });\n      this.setState({\n        threedaysprice: JSON.parse(localStorage.getItem(\"threedaysprice\"))\n      });\n      this.setState({\n        fourdaysprice: JSON.parse(localStorage.getItem(\"fourdaysprice\"))\n      });\n    }\n  }\n  render() {\n    return (\n      <div className=\"history--section container\">\n        <h2>History (Past 5 days)</h2>\n        <div className=\"history--section__box\">\n          <div className=\"history--section__box__inner\">\n            <h4>{this.state.todayprice.date}</h4>\n            <div className=\"columns\">\n              <div className=\"column\">\n                <p>1 BTC = ${this.state.todayprice.btc}</p>\n              </div>\n              <div className=\"column\">\n                <p>1 ETH = ${this.state.todayprice.eth}</p>\n              </div>\n              <div className=\"column\">\n                <p>1 LTC = ${this.state.todayprice.ltc}</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"history--section__box__inner\">\n            <h4>{this.state.yesterdayprice.date}</h4>\n            <div className=\"columns\">\n              <div className=\"column\">\n                <p>1 BTC = ${this.state.yesterdayprice.btc}</p>\n              </div>\n              <div className=\"column\">\n                <p>1 ETH = ${this.state.yesterdayprice.eth}</p>\n              </div>\n              <div className=\"column\">\n                <p>1 LTC = ${this.state.yesterdayprice.ltc}</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"history--section__box__inner\">\n            <h4>{this.state.twodaysprice.date}</h4>\n            <div className=\"columns\">\n              <div className=\"column\">\n                <p>1 BTC = ${this.state.twodaysprice.btc}</p>\n              </div>\n              <div className=\"column\">\n                <p>1 ETH = ${this.state.twodaysprice.eth}</p>\n              </div>\n              <div className=\"column\">\n                <p>1 LTC = ${this.state.twodaysprice.ltc}</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"history--section__box__inner\">\n            <h4>{this.state.threedaysprice.date}</h4>\n            <div className=\"columns\">\n              <div className=\"column\">\n                <p>1 BTC = ${this.state.threedaysprice.btc}</p>\n              </div>\n              <div className=\"column\">\n                <p>1 ETH = ${this.state.threedaysprice.eth}</p>\n              </div>\n              <div className=\"column\">\n                <p>1 LTC = ${this.state.threedaysprice.ltc}</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"history--section__box__inner\">\n            <h4>{this.state.fourdaysprice.date}</h4>\n            <div className=\"columns\">\n              <div className=\"column\">\n                <p>1 BTC = ${this.state.fourdaysprice.btc}</p>\n              </div>\n              <div className=\"column\">\n                <p>1 ETH = ${this.state.fourdaysprice.eth}</p>\n              </div>\n              <div className=\"column\">\n                <p>1 LTC = ${this.state.fourdaysprice.ltc}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default History;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Today from \"./Today/Today\";\nimport History from \"./History/History\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"\">\n        <div className=\"topheader\">\n          <header className=\"container\">\n            <nav className=\"navbar\">\n              <div className=\"navbar-brand\">\n                <span className=\"navbar-item\">PusherCoins</span>\n              </div>\n              <div className=\"navbar-end\">\n                <a\n                  className=\"navbar-item\"\n                  href=\"https://pusher.com\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  Pusher.com\n                </a>\n              </div>\n            </nav>\n          </header>\n        </div>\n        <section className=\"results--section\">\n          <div className=\"container\">\n            <h1>\n              PusherCoins is a realtime price information about\n              <br /> BTC, ETH and LTC.\n            </h1>\n          </div>\n          <div className=\"results--section__inner\">\n            <Today />\n            <History />\n          </div>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}